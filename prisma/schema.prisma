// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

generator json {
    provider = "prisma-json-types-generator"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Item {
    id        Int      @id
    key       String
    name      String
    image     String
    category  String
    seasons   Season[]
    extraText String[]
    /// [ItemInfo]
    info      Json

    custom     Boolean @default(false)
    /// [CustomItemData]
    customData Json?

    marketEntries        MarketEntry[]
    shopEntries          ShopEntry[]
    quickSellEntries     QuickSellEntry[]
    recipe               Recipe?
    usages               RecipeIngredient[]
    holdingCats          Cat[]
    ResourceGatherResult ResourceGatherResult[]
}

model MarketEntry {
    id           Int      @id
    item         Item     @relation(fields: [itemId], references: [id])
    itemId       Int
    itemCount    Int
    sellerId     Int
    sellerName   String
    category     String
    priceType    Currency
    priceCount   Int
    expiryTime   DateTime
    creationTime DateTime
}

model Shop {
    url          String      @id
    name         String      @unique
    description  String
    category     String
    previewImage String
    image        String?
    blurb        String?
    shopEntries  ShopEntry[]
}

model ShopEntry {
    id         String   @id @default(uuid())
    item       Item     @relation(fields: [itemId], references: [id])
    itemId     Int
    shop       Shop     @relation(fields: [shopUrl], references: [url])
    shopUrl    String
    priceType  Currency
    priceCount Int
    event      Event?

    @@unique(name: "shopItemPriceType", [shopUrl, itemId, priceCount, priceType])
}

model QuickSellEntry {
    id         String   @id @default(uuid())
    item       Item     @relation(fields: [itemId], references: [id])
    itemId     Int
    priceType  Currency @default(NOTE)
    priceCount Int

    @@unique(name: "itemPrice", [itemId, priceCount, priceType])
}

model Recipe {
    id          String             @id @default(uuid())
    resultId    Int                @unique
    result      Item               @relation(fields: [resultId], references: [id])
    resultCount Int
    category    RecipeCategory
    ingredients RecipeIngredient[]
}

model RecipeIngredient {
    item     Item   @relation(fields: [itemId], references: [id])
    itemId   Int
    recipe   Recipe @relation(fields: [recipeId], references: [id])
    recipeId String
    count    Int

    @@id([itemId, recipeId])
}

model ResourceGather {
    id         String                 @id
    time       String
    roll       Int
    skillBonus Int
    profession String
    catName    String
    catId      Int
    extraText  String?
    results    ResourceGatherResult[]
}

model ResourceGatherResult {
    item             Item           @relation(fields: [itemId], references: [id])
    itemId           Int
    resourceGather   ResourceGather @relation(fields: [resourceGatherId], references: [id])
    resourceGatherId String
    count            Int

    @@id([itemId, resourceGatherId])
}

model Cat {
    id        Int     @id
    ownerName String?
    ownerId   Int?

    travelling Boolean
    location   String

    genetic String?

    name        String
    wind        String
    personality String
    clothing    Int[]
    birthYear   Int
    birthSeason Season
    birthDay    Int
    pronouns    String
    origin      String
    species     String
    sizeLb      Float
    sizeKg      Float
    fur         String
    color       String
    pattern     String
    whiteMarks  String
    accentColor String?
    eyeColor    String
    ageType     String
    ageNumber   String

    trinket   Item? @relation(fields: [trinketId], references: [id])
    trinketId Int?

    job     String?
    jobXp   Json?
    class   String?
    classXp Json?

    strength   Int?
    agility    Int?
    health     Int?
    finesse    Int?
    cleverness Int?
    perception Int?
    luck       Int?

    bravery      Int?
    benevolence  Int?
    energy       Int?
    extroversion Int?
    dedication   Int?

    friends Json
    family  Json

    bio String?
}

enum RecipeCategory {
    APOTHECARY
    CLOTHIER
    SCRIBE
    ARTIST
    BLACKSMITH
    CRAFTSCAT
    BUILDER
    MASON
    BAKER
}

enum Season {
    SPRING
    SUMMER
    AUTUMN
    WINTER
}

enum Event {
    SNOWMELT
    MIDSUMMER_FESTIVAL
    LEAF_DAY
    CANDLELIGHT_FESTIVAL
}

enum Currency {
    NOTE
    ESSENCE
    SNOWMELT_STAMP
    LEAF_DAY_STAMP
    LOST_BUTTON
    FESTIVAL_TICKET
}

// Auth

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
	
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}