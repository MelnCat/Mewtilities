// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Item {
    id               Int                @id
    key              String
    name             String
    image            String
    category         String
    seasons          Season[]
    extraText        String[]
    info             Json
    marketEntries    MarketEntry[]
    shopEntries      ShopEntry[]
    quickSellEntries QuickSellEntry[]
    recipe           Recipe?
    usages           RecipeIngredient[]
}

model MarketEntry {
    id           Int      @id
    item         Item     @relation(fields: [itemId], references: [id])
    itemId       Int
    itemCount    Int
    sellerId     Int
    sellerName   String
    category     String
    priceType    Currency
    priceCount   Int
    expiryTime   DateTime
    creationTime DateTime
}

model Shop {
    url          String      @id
    name         String      @unique
    description  String
    category     String
    previewImage String
    image        String?
    blurb        String?
    shopEntries  ShopEntry[]
}

model ShopEntry {
    id         String   @id @default(uuid())
    item       Item     @relation(fields: [itemId], references: [id])
    itemId     Int
    shop       Shop     @relation(fields: [shopUrl], references: [url])
    shopUrl    String
    priceType  Currency
    priceCount Int
    event      Event?

    @@unique(name: "shopItemPriceType", [shopUrl, itemId, priceCount, priceType])
}

model QuickSellEntry {
    id         String    @id @default(uuid())
    item       Item      @relation(fields: [itemId], references: [id])
    itemId     Int
    priceType  Currency?
    priceCount Int

    @@unique(name: "itemPrice", [itemId, priceCount, priceType])
}

model Recipe {
    id          String             @id @default(uuid())
    resultId    Int                @unique
    result      Item               @relation(fields: [resultId], references: [id])
    category    RecipeCategory
    ingredients RecipeIngredient[]
}

model RecipeIngredient {
    item     Item   @relation(fields: [itemId], references: [id])
    itemId   Int
    recipe   Recipe @relation(fields: [recipeId], references: [id])
    recipeId String
    count    Int

    @@id([itemId, recipeId])
}

enum RecipeCategory {
    APOTHECARY
    CLOTHIER
    SCRIBE
    ARTIST
    BLACKSMITH
    CRAFTSCAT
    BUILDER
    MASON
    BAKER
}

enum Season {
    SPRING
    SUMMER
    AUTUMN
    WINTER
}

enum Event {
    SNOWMELT
    MIDSUMMER_FESTIVAL
    LEAF_DAY
    CANDLELIGHT_FESTIVAL
}

enum Currency {
    NOTE
    ESSENCE
    SNOWMELT_STAMP
    LEAF_DAY_STAMP
    LOST_BUTTON
    FESTIVAL_TICKET
}
